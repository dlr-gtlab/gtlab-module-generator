#include <QLabel>
#include <QLineEdit>
#include <QGridLayout>
#include <QCheckBox>
#include <QRegularExpression>
#include <QRegularExpressionValidator>
#include <QSpacerItem>

#include "module_specifications_page.h"
#include "module_generator_settings.h"
#include "module_generator_logger.h"


const char* C_TITLE_SPECIFICATIONS_PAGE = "Module Specifications";

const QString S_INFO_TEXT =
        QStringLiteral("Enter a name and the version of the module. "
                       "Add a short description and "
                       "optionally define a prefix, which will be placed "
                       "in front of each file- and class name.");
const QString S_MODULE_PREFIX_LABEL =
        QStringLiteral("Prefix:");
const QString S_CLASS_NAME_LABEL =
        QStringLiteral("Class name:");
const QString S_FILE_NAME_LABEL =
        QStringLiteral("File name:");
const QString S_MODULE_NAME_LABEL =
        QStringLiteral("Module name:");
const QString S_MODULE_VERSION_LABEL =
        QStringLiteral("Module version:");
const QString S_MODULE_DESCRIPTION_LABEL =
        QStringLiteral("Module description:");
const QString S_AUTO_COMPLETE_LABEL =
        QStringLiteral("autocomplete description, file- and class name");

const QString S_AUTO_GENERATED_TOOLTIP =
        QStringLiteral("autogenerated using the module name");
const QString S_AUTO_GENERATED_ALT_TOOLTIP =
        QStringLiteral("this value is locked and can not be edited directly");

/*
 * constructor
 */
ModuleSpecificationsPage::ModuleSpecificationsPage(ModuleGeneratorSettings* settings, QWidget* parent) :
    AbstractWizardPage(settings, parent)
{
    // initializations
    m_prefixValidator = new QRegularExpressionValidator(ModuleGeneratorSettings::REG_PREFIX, this);
    m_nameValidator = new QRegularExpressionValidator(ModuleGeneratorSettings::REG_OBJECT_NAME, this);
    m_versionValidator = new QRegularExpressionValidator(ModuleGeneratorSettings::REG_VERSION, this);

    m_infoTextLabel = new QLabel(S_INFO_TEXT);
    m_modulePrefixLabel = new QLabel(S_MODULE_PREFIX_LABEL);
    m_classNameLabel = new QLabel(S_CLASS_NAME_LABEL);
    m_fileNameLabel = new QLabel(S_FILE_NAME_LABEL);
    m_moduleNameLabel = new QLabel(S_MODULE_NAME_LABEL);
    m_versionLabel = new QLabel(S_MODULE_VERSION_LABEL);
    m_descriptionLabel = new QLabel(S_MODULE_DESCRIPTION_LABEL);

    m_modulePrefixEdit = new QLineEdit;
    m_classNameEdit = new QLineEdit;
    m_fileNameEdit = new QLineEdit;
    m_moduleNameEdit = new QLineEdit;
    m_versionEdit = new QLineEdit;
    m_descriptionEdit = new QLineEdit;
    m_autoEditCheckBox = new QCheckBox(S_AUTO_COMPLETE_LABEL);

    m_baseLayout = new QGridLayout;

    m_vSpacer = new QSpacerItem(1, 1000, QSizePolicy::Minimum, QSizePolicy::Expanding);

    // page gui
    setTitle(tr(C_TITLE_SPECIFICATIONS_PAGE));

    m_infoTextLabel->setWordWrap(true);
    m_infoTextLabel->setMinimumHeight(AbstractWizardPage::I_INFOTEXTLABEL_HEIGHT);
    m_infoTextLabel->setAlignment(Qt::AlignTop | Qt::AlignLeft);

    m_modulePrefixEdit->setValidator(m_prefixValidator);
    m_moduleNameEdit->setValidator(m_nameValidator);
    m_versionEdit->setValidator(m_versionValidator);

    m_fileNameEdit->setEnabled(false);
    m_classNameEdit->setEnabled(false);

    m_baseLayout->addWidget(m_infoTextLabel, 0, 0, 1, 2);
    m_baseLayout->addWidget(m_modulePrefixLabel, 1, 0);
    m_baseLayout->addWidget(m_modulePrefixEdit, 1, 1);
    m_baseLayout->addWidget(m_moduleNameLabel, 2, 0);
    m_baseLayout->addWidget(m_moduleNameEdit, 2, 1);
    m_baseLayout->addWidget(m_classNameLabel, 3, 0);
    m_baseLayout->addWidget(m_classNameEdit, 3, 1);
    m_baseLayout->addWidget(m_fileNameLabel, 4, 0);
    m_baseLayout->addWidget(m_fileNameEdit, 4, 1);
    m_baseLayout->addWidget(m_versionLabel, 5, 0);
    m_baseLayout->addWidget(m_versionEdit, 5, 1);
    m_baseLayout->addWidget(m_descriptionLabel, 6, 0);
    m_baseLayout->addWidget(m_descriptionEdit, 6, 1);
    m_baseLayout->addWidget(m_autoEditCheckBox, 7, 0, 1, 2);
    m_baseLayout->addItem(m_vSpacer, 8, 0, 1, 2);
    m_baseLayout->setColumnMinimumWidth(0, AbstractWizardPage::I_PAGES_COLUMN_WIDTH);

    setLayout(m_baseLayout);


    // signals
    connect(m_moduleNameEdit, SIGNAL(textChanged(QString)),
            this, SLOT(onEditedModuleName(QString)));
    connect(m_moduleNameEdit, SIGNAL(textChanged(QString)),
            this,  SIGNAL(completeChanged()));

    connect(m_modulePrefixEdit, SIGNAL(textChanged(QString)),
            this,  SIGNAL(completeChanged()));
    connect(m_modulePrefixEdit, SIGNAL(textChanged(QString)),
            this,  SLOT(onEditedPrefix()));

    connect(m_versionEdit, SIGNAL(textChanged(QString)),
            this,  SIGNAL(completeChanged()));
    connect(m_versionEdit, SIGNAL(textChanged(QString)),
            this, SLOT(onEditedVersion(QString)));

    connect(m_autoEditCheckBox, SIGNAL(stateChanged(int)),
            this, SIGNAL(completeChanged()));
    connect(m_autoEditCheckBox, SIGNAL(stateChanged(int)),
            this, SLOT(onAutoCompleteChanged(int)));

    // defaults
    m_autoEditCheckBox->setChecked(true);
    onAutoCompleteChanged(true);

    m_modulePrefixEdit->setText(settings->modulePrefix());
    m_moduleNameEdit->setText(settings->moduleClass().ident);
    m_versionEdit->setText(settings->moduleClass().version);
    m_descriptionEdit->setText(settings->moduleClass().description);
}

/*
 * protected
 */
void
ModuleSpecificationsPage::initializePage()
{
    LOG_INSTANCE("specifications page...");
}

bool
ModuleSpecificationsPage::isComplete() const
{
    QString prefix = m_modulePrefixEdit->text();

    if (settings()->reservedPrefixes().contains(prefix.toLower()))
    {
        m_modulePrefixEdit->setStyleSheet("QLineEdit { color : red }");

        return false;
    }

    m_modulePrefixEdit->setStyleSheet("QLineEdit { color : black }");

    int  pos = 0;
    QString version    = m_versionEdit->text();
    QString moduleName = m_moduleNameEdit->text().simplified();

    if (m_versionValidator->validate(version, pos) != QRegExpValidator::Acceptable ||
        m_nameValidator->validate(moduleName, pos) != QRegExpValidator::Acceptable ||
        moduleName.size() < 3 ||
        (!prefix.isEmpty() &&
         m_prefixValidator->validate(prefix, pos) != QRegExpValidator::Acceptable))
    {
        return false;
    }

    return QWizardPage::isComplete();
}

bool
ModuleSpecificationsPage::validatePage()
{
    LOG_INSTANCE("validated!");

    settings()->setModulePrefix(m_modulePrefixEdit->text());

    ModuleClass moduleClass;

    moduleClass.ident       = m_moduleNameEdit->text().simplified();
    moduleClass.className   = m_classNameEdit->text();
    moduleClass.fileName    = m_fileNameEdit->text();
    moduleClass.description = m_descriptionEdit->text();
    moduleClass.version     = m_versionEdit->text();

    settings()->setModuleClass(moduleClass);

    LOG_INFO << "prefix             " << m_modulePrefixEdit->text() << ENDL;
    LOG_INFO << "class name         " << moduleClass.ident << ENDL;
    LOG_INFO << "file name          " << moduleClass.className << ENDL;
    LOG_INFO << "module name        " << moduleClass.fileName << ENDL;
    LOG_INFO << "module version     " << moduleClass.description << ENDL;
    LOG_INFO << "module description " << moduleClass.version << ENDL;

    return true;
}

/*
 *  private
 */
void
ModuleSpecificationsPage::autoComplete()
{
    if (!m_autoEditCheckBox->isChecked())
    {
        m_fileNameEdit->setToolTip(S_AUTO_GENERATED_ALT_TOOLTIP);
        m_classNameEdit->setToolTip(S_AUTO_GENERATED_ALT_TOOLTIP);

        return;
    }

    QString moduleName = m_moduleNameEdit->text();
    QString prefix     = m_modulePrefixEdit->text();

    m_fileNameEdit->setText(settings()->fileNamingScheme(moduleName,
                                                         prefix));
    m_classNameEdit->setText(settings()->classNamingScheme(moduleName,
                                                           prefix));

    m_fileNameEdit->setToolTip(S_AUTO_GENERATED_TOOLTIP);
    m_classNameEdit->setToolTip(S_AUTO_GENERATED_TOOLTIP);

    QString desc(moduleName);

    if (!prefix.isEmpty())
    {
        prefix.replace(0, 1, prefix.at(0).toUpper());
        desc.prepend(prefix + QChar(' '));
    }

    m_descriptionEdit->setText(desc.simplified());
}

/*
 * private slots
 */
void
ModuleSpecificationsPage::onEditedPrefix()
{
    autoComplete();
}

void
ModuleSpecificationsPage::onEditedModuleName(QString name)
{
    autoComplete();
}

void
ModuleSpecificationsPage::onEditedVersion(QString content)
{
    int pos = 0;

    if (m_versionValidator->validate(content, pos) == QRegExpValidator::Intermediate)
    {
        m_versionEdit->setStyleSheet("QLineEdit { color : red }");
    }
    else
    {
        m_versionEdit->setStyleSheet("QLineEdit { color : black }");
    }
}

void
ModuleSpecificationsPage::onAutoCompleteChanged(int state)
{
    bool active = state > 0;

    m_descriptionEdit->setEnabled(!active);
//    m_classNameEdit->setEnabled(!active);
//    m_fileNameEdit->setEnabled(!active);

    autoComplete();
}


