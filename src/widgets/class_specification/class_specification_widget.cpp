#include "class_specification_widget.h"

#include "function_specification_widget.h"
#include "module_generator.h"
#include "module_generator_settings.h"
#include "module_generator_logger.h"

#include <QGridLayout>
#include <QLabel>
#include <QLineEdit>
#include <QFrame>
#include <QRegularExpressionValidator>
#include <QCheckBox>
#include <QPushButton>

const static int I_FUNCTION_WIDGET_HEIGHT = 100;

//const static int I_MINIMAL_WIDTH = 320;

const QString
ClassSpecificationWidget::S_CLASS_NAME_LABEL =
        QStringLiteral("Class name:");
const QString
ClassSpecificationWidget::S_FILE_NAME_LABEL =
        QStringLiteral("File name:");
const QString
ClassSpecificationWidget::S_OBJECT_NAME_LABEL =
        QStringLiteral("Object name:");
const QString
ClassSpecificationWidget::S_AUTO_COMPLETE_LABEL =
        QStringLiteral("autogenerate file and class name");

//const QString
//S_INFO_TEXT =
//        QStringLiteral("This class will be generated. "
//                       "Set the object, class and file name accordingly.");
//const QString
//S_INFO_ALT_TEXT =
//        QStringLiteral("Enter the name of an existing class you wish to "
//                       "extend.");

const QString
ClassSpecificationWidget::S_AUTO_GENERATED_TOOLTIP =
        QStringLiteral("Autogenerated using the object name");
const QString
ClassSpecificationWidget::S_AUTO_GENERATED_ALT_TOOLTIP =
        QStringLiteral("This value is locked and cannot be edited directly");

ClassSpecificationWidget::ClassSpecificationWidget(ClassData const& baseClass,
                                                   ModuleGeneratorSettings* settings,
                                                   QWidget* parent) :
    QWidget(parent),
    m_settings(settings)
{
    m_nameValidator = new QRegularExpressionValidator{
            ModuleGeneratorSettings::REG_OBJECT_NAME, this};
    m_classNameValidator = new QRegularExpressionValidator(
                ModuleGeneratorSettings::REG_CLASS_NAME, this);
    m_fileNameValidator = new QRegularExpressionValidator(
                ModuleGeneratorSettings::REG_FILE_NAME, this);

    auto* baseLayout = new QGridLayout;

    auto* objectNamelabel = new QLabel{S_OBJECT_NAME_LABEL};
    auto* classNameLabel = new QLabel{S_CLASS_NAME_LABEL};
    auto* fileNameLabel = new QLabel{S_FILE_NAME_LABEL};

    auto* applyButton = new QPushButton{"Apply"};

    m_classNameEdit = new QLineEdit;
    m_objectNameEdit = new QLineEdit;
    m_fileNameEdit = new QLineEdit;
    m_autoEditCheckBox = new QCheckBox{S_AUTO_COMPLETE_LABEL};

    int row = 0;
    baseLayout->addWidget(objectNamelabel, row, 0);
    baseLayout->addWidget(m_objectNameEdit, row++, 1);
    baseLayout->addWidget(classNameLabel, row, 0);
    baseLayout->addWidget(m_classNameEdit, row++, 1);
    baseLayout->addWidget(fileNameLabel, row, 0);
    baseLayout->addWidget(m_fileNameEdit, row++, 1);
    baseLayout->addWidget(m_autoEditCheckBox, row++, 0, 1, 2);

    m_objectNameEdit->setValidator(m_nameValidator);
    m_classNameEdit->setValidator(m_classNameValidator);
    m_fileNameEdit->setValidator(m_fileNameValidator);

//    infoLabel->setWordWrap(true);
//    infoLabel->setMinimumHeight(I_INFOLABEL_HEIGHT);
//    infoLabel->setAlignment(Qt::AlignTop | Qt::AlignLeft);

    // fix wierd scaling issues
    objectNamelabel->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    classNameLabel->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    fileNameLabel->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    applyButton->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    m_autoEditCheckBox->setSizePolicy(QSizePolicy::Minimum,
                                      QSizePolicy::Minimum);

    // signals
    connect(m_objectNameEdit, SIGNAL(textEdited(QString)),
            this, SLOT(onEditedObjectName(QString)));
    connect(m_classNameEdit, SIGNAL(textEdited(QString)),
            this, SLOT(onEditedClassName(QString)));
    connect(m_fileNameEdit, SIGNAL(editingFinished()),
            this, SLOT(onEditedFileName()));
    connect(m_autoEditCheckBox, SIGNAL(stateChanged(int)),
            this, SLOT(onAutoCompleteChanged(int)));
    connect(applyButton, SIGNAL(clicked()), this, SLOT(hide()));
    connect(applyButton, SIGNAL(clicked()), this, SIGNAL(hidden()));

    QString className = baseClass.className;

    // widget is used for specifing an external class
    if (!baseClass.isValid())
    {
//        infoLabel->setText(S_INFO_ALT_TEXT);
        className = QStringLiteral("GtObject");
        objectNamelabel->setVisible(false);
        m_objectNameEdit->setVisible(false);
        m_autoEditCheckBox->setVisible(false);
    }
    // widget is used for creating a new class
    else
    {
        m_autoEditCheckBox->setChecked(true);
        autoComplete();
    }

    // append function data
    if (!baseClass.functions.isEmpty())
    {
        initFunctionWidget(*baseLayout, row, baseClass.functions);
    }

    // finalize layout
    auto* spacer = new QSpacerItem{1, 1,
                                   QSizePolicy::MinimumExpanding,
                                   QSizePolicy::MinimumExpanding};
    baseLayout->addItem(spacer, row, 0, 1, 2);
    baseLayout->addWidget(applyButton, row++, 1,
                          Qt::AlignRight | Qt::AlignBottom);

    setLayout(baseLayout);
    setWindowTitle(className);
    setWindowFlags(windowFlags() & ~Qt::WindowMaximizeButtonHint);
    setWindowFlags(windowFlags() & ~Qt::WindowMinimizeButtonHint);

    // hack for the package naming problem (issue #153 in Core)
    if (baseClass.className == QStringLiteral("GtPackage"))
    {
        // auto generate the package file and class name
        m_objectNameEdit->setText(QStringLiteral("Package"));
        m_autoEditCheckBox->setChecked(true);
        onAutoCompleteChanged(true);

        // set the correct object name
        m_autoEditCheckBox->setChecked(false);
        m_autoEditCheckBox->setEnabled(false);
        m_objectNameEdit->setText(settings->moduleClass().ident);
        m_objectNameEdit->setToolTip(S_AUTO_GENERATED_ALT_TOOLTIP);

        m_objectNameEdit->setEnabled(false);
        m_fileNameEdit->setEnabled(false);
        m_classNameEdit->setEnabled(false);

        emit hidden();
        return;
    }
}

ClassData
ClassSpecificationWidget::implementedClass()
{
    m_implementedClass.className   = m_classNameEdit->text();
    m_implementedClass.fileName    = m_fileNameEdit->text();
    m_implementedClass.objectName  = m_objectNameEdit->text().simplified();

    if (m_functionWidget)
    {
        m_implementedClass.functions = m_functionWidget->implementedFunctions();
    }

    return m_implementedClass;
}

void
ClassSpecificationWidget::autoComplete()
{
    if (!m_autoEditCheckBox->isChecked())
    {
        m_classNameEdit->setEnabled(true);
        m_fileNameEdit->setEnabled(true);
        return;
    }

    m_classNameEdit->setEnabled(false);
    m_fileNameEdit->setEnabled(false);

    QString objectName = m_objectNameEdit->text();

    m_fileNameEdit->setText(m_settings->fileNamingScheme(objectName));
    m_classNameEdit->setText(m_settings->classNamingScheme(objectName));

    m_fileNameEdit->setToolTip(S_AUTO_GENERATED_TOOLTIP);
    m_classNameEdit->setToolTip(S_AUTO_GENERATED_TOOLTIP);
}

void
ClassSpecificationWidget::initFunctionWidget(QGridLayout& layout, int& row,
                                             FunctionDataList const& functions)
{
    m_functionWidget = new FunctionSpecificationWidget(functions, m_settings);

    if (m_functionWidget->isEmpty())
    {
       LOG_INDENT_WARN("empty function widget!");
       // for default implementations
       m_implementedClass.functions = m_functionWidget->implementedFunctions();
        delete m_functionWidget;
        m_functionWidget = nullptr;
        return;
    }

    auto* line = new QFrame;
    line->setFrameShape(QFrame::HLine);
    line->setFrameShadow(QFrame::Sunken);
    layout.addWidget(line, row++, 0, 1, 2);

    layout.addWidget(m_functionWidget, row++, 0, 1, 2);

    // fix wierd scaling issues
    line->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
    m_functionWidget->setSizePolicy(QSizePolicy::Minimum, QSizePolicy::Minimum);
//    m_functionWidget->setMinimumHeight(I_FUNCTION_WIDGET_HEIGHT);
}

void
ClassSpecificationWidget::closeEvent(QCloseEvent* event)
{
    event->accept();
    emit hidden();
}

void
ClassSpecificationWidget::onEditedObjectName(QString name)
{
    Q_UNUSED(name)
    autoComplete();
}

void
ClassSpecificationWidget::onEditedClassName(QString name)
{
    Q_UNUSED(name)

    if (m_fileNameEdit->text().isEmpty()) m_autoEditFileName = true;

    if (m_autoEditFileName)
    {
        m_fileNameEdit->setText(m_classNameEdit->text().toLower());
    }
}

void
ClassSpecificationWidget::onEditedFileName()
{
    m_autoEditFileName = false;
    m_fileNameEdit->setText(m_fileNameEdit->text().toLower());
}

void
ClassSpecificationWidget::onAutoCompleteChanged(int state)
{
    Q_UNUSED(state)
    autoComplete();
}
